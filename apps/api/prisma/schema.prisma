generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================
// ENUMS
// =================

enum LicenseStatus {
  ACTIVE
  SUSPENDED
  EXPIRED
  CANCELLED
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum JobType {
  FULL_CRAWL
  UPDATE_CRAWL
  TARGETED_CRAWL
}

enum TargetType {
  URL
  KEYWORD
  CATEGORY
  STORE_ID
}

enum UsageType {
  CRAWL_COUNT
  DATA_POINTS
  API_CALLS
}

enum Period {
  DAILY
  MONTHLY
  YEARLY
}

enum NotificationType {
  JOB_COMPLETED
  QUOTA_WARNING
  LICENSE_EXPIRING
  SYSTEM_MAINTENANCE
}

// =================
// 사용자 & 인증
// =================
model users {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  nickname  String?
  avatar    String?
  isAdmin   Boolean  @default(false) @map("is_admin")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  licenses      licenses[]
  crawlProjects crawlProjects[]
  crawlJobs     crawlJobs[]
  notifications notifications[]
  usageStats    usageStats[]

  @@map("users")
}

// =================
// 서비스 & 상품 관리
// =================

// 서비스 상품 (크롤링 서비스)
model services {
  id          Int      @id @default(autoincrement())
  code        String   @unique // "NAVER_BLOG_CRAWLING"
  name        String // "네이버 블로그 크롤링"
  description String?
  category    String   @default("crawling") // "crawling", "monitoring", "analytics"
  isActive    Boolean  @default(true) @map("is_active")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  licenses      licenses[]
  crawlProjects crawlProjects[]
  crawlJobs     crawlJobs[]
  usageStats    usageStats[]

  @@map("services")
}

// 구독 플랜
model subscriptionPlans {
  id        Int      @id @default(autoincrement())
  code      String   @unique // "ONE_MONTH", "THREE_MONTHS"
  name      String // "1개월 구독", "3개월 구독"
  duration  Int? // 30, 90, null(평생)
  price     Decimal  @db.Decimal(10, 2)
  discount  Float? // 할인율 (0.12 = 12%)
  features  Json // 플랜별 기능 목록
  isActive  Boolean  @default(true) @map("is_active")
  sortOrder Int      @default(0) @map("sort_order")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  licenses licenses[]

  @@map("subscription_plans")
}

// 애드온 상품
model addonProducts {
  id          Int      @id @default(autoincrement())
  code        String   @unique // "EXTRA_DEVICE", "SUBSCRIPTION_EXTENSION"
  name        String // "추가 디바이스", "구독 연장"
  unitPrice   Decimal  @db.Decimal(10, 2)
  description String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  licenseAddons licenseAddons[]

  @@map("addon_products")
}

// 라이센스 (통합 구조)
model licenses {
  id                 Int       @id @default(autoincrement())
  userEmail          String    @map("user_email")
  licenseKey         String    @unique @map("license_key")
  serviceId          Int       @map("service_id")
  subscriptionPlanId Int       @map("subscription_plan_id")
  startDate          DateTime  @map("start_date")
  endDate            DateTime? @map("end_date")

  // 디바이스 관리
  maxDevices            Int  @default(3) @map("max_devices")
  activatedDevices      Json @default("[]") @map("activated_devices")
  maxTransfers          Int  @default(5) @map("max_transfers")
  extraDevicesPurchased Int  @default(0) @map("extra_devices_purchased")

  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user             users             @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  service          services          @relation(fields: [serviceId], references: [id])
  subscriptionPlan subscriptionPlans @relation(fields: [subscriptionPlanId], references: [id])
  usageStats       usageStats[]
  addons           licenseAddons[]

  @@index([userEmail])
  @@index([serviceId])
  @@index([subscriptionPlanId])
  @@map("licenses")
}

// 라이센스 애드온 구매 내역
model licenseAddons {
  id             Int      @id @default(autoincrement())
  licenseKey     String   @map("license_key")
  addonProductId Int      @map("addon_product_id")
  quantity       Int      @default(1)
  purchaseDate   DateTime @default(now()) @map("purchase_date")

  // Relations
  license      licenses      @relation(fields: [licenseKey], references: [licenseKey], onDelete: Cascade)
  addonProduct addonProducts @relation(fields: [addonProductId], references: [id])

  @@index([licenseKey])
  @@index([addonProductId])
  @@map("license_addons")
}

// =================
// 크롤링 프로젝트 & 작업
// =================
model crawlProjects {
  id          Int      @id @default(autoincrement())
  userEmail   String   @map("user_email")
  projectName String
  serviceId   Int      @map("service_id")
  description String?
  config      Json // 프로젝트별 설정
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user      users     @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  service   services  @relation(fields: [serviceId], references: [id])
  crawlJobs crawlJobs[]
  targets   crawlTargets[]

  @@index([userEmail])
  @@index([serviceId])
  @@map("crawl_projects")
}

model crawlTargets {
  id           Int        @id @default(autoincrement())
  projectId    Int        @map("project_id")
  targetType   TargetType @map("target_type")
  targetValue  String     @map("target_value")
  targetConfig Json?      @map("target_config") // 타겟별 세부 설정
  schedule     Json? // 스케줄 설정
  isActive     Boolean    @default(true) @map("is_active")
  lastCrawled  DateTime?  @map("last_crawled")
  createdAt    DateTime   @default(now()) @map("created_at")

  // Relations
  project   crawlProjects @relation(fields: [projectId], references: [id], onDelete: Cascade)
  crawlJobs crawlJobs[]

  @@index([projectId])
  @@index([targetType])
  @@map("crawl_targets")
}

model crawlJobs {
  id        Int       @id @default(autoincrement())
  userEmail String    @map("user_email")
  projectId Int?      @map("project_id")
  targetId  Int?      @map("target_id")
  serviceId Int       @map("service_id")
  jobType   JobType   @map("job_type")
  config    Json // 작업별 설정
  status    JobStatus @default(PENDING)
  priority  Int       @default(5) @map("priority") // 1(highest) ~ 10(lowest)

  // 진행 상황
  totalItems     Int @default(0) @map("total_items")
  processedItems Int @default(0) @map("processed_items")
  successItems   Int @default(0) @map("success_items")
  failedItems    Int @default(0) @map("failed_items")

  // 시간 정보
  scheduledAt   DateTime? @map("scheduled_at")
  startedAt     DateTime? @map("started_at")
  completedAt   DateTime? @map("completed_at")
  estimatedTime Int?      @map("estimated_time") // 예상 소요시간(초)

  // 오류 정보
  errorCode    String? @map("error_code")
  errorMessage String? @map("error_message")
  errorDetails Json?   @map("error_details")

  // 메타데이터
  userAgent String?  @map("user_agent")
  proxyUsed String?  @map("proxy_used")
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user    users          @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  service services       @relation(fields: [serviceId], references: [id])
  project crawlProjects? @relation(fields: [projectId], references: [id])
  target  crawlTargets?  @relation(fields: [targetId], references: [id])
  results crawlResults[]

  @@index([userEmail])
  @@index([status])
  @@index([serviceId])
  @@index([createdAt])
  @@map("crawl_jobs")
}

// =================
// 크롤링 결과 데이터
// =================
model crawlResults {
  id         Int      @id @default(autoincrement())
  jobId      Int      @map("job_id")
  itemId     String?  @map("item_id") // 외부 시스템 ID
  itemType   String   @map("item_type") // "product", "review", "blog_post", "place"
  data       Json // 실제 크롤링된 데이터
  metadata   Json? // 추가 메타데이터
  quality    Float? // 데이터 품질 점수 (0-1)
  itemOrder  Int?     @map("item_order") // 결과 내 순서
  pageNumber Int?     @map("page_number")
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  job crawlJobs @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([itemType])
  @@index([itemId])
  @@map("crawl_results")
}

// =================
// 사용량 통계 & 모니터링
// =================
model usageStats {
  id          Int       @id @default(autoincrement())
  userEmail   String    @map("user_email")
  licenseKey  String    @map("license_key")
  serviceId   Int       @map("service_id")
  usageType   UsageType @map("usage_type")
  amount      Int
  period      Period
  periodStart DateTime  @map("period_start") @db.Date
  periodEnd   DateTime  @map("period_end") @db.Date
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  user    users    @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  service services @relation(fields: [serviceId], references: [id])
  license licenses @relation(fields: [licenseKey], references: [licenseKey], onDelete: Cascade)

  @@unique([userEmail, licenseKey, serviceId, usageType, periodStart])
  @@index([userEmail])
  @@index([serviceId])
  @@index([periodStart])
  @@map("usage_stats")
}

// =================
// 알림 & 커뮤니케이션
// =================
model notifications {
  id        Int              @id @default(autoincrement())
  userEmail String           @map("user_email")
  type      NotificationType
  title     String
  message   String
  data      Json? // 알림 관련 추가 데이터
  isRead    Boolean          @default(false) @map("is_read")
  readAt    DateTime?        @map("read_at")
  createdAt DateTime         @default(now()) @map("created_at")

  // Relations
  user users @relation(fields: [userEmail], references: [email], onDelete: Cascade)

  @@index([userEmail])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}
